#pragma once

/*
 *  AES
 *  Created on: 30-Nov-2019
 *  Author: Abdullah Naveed
 */

#include<iostream>
#include<math.h>

using namespace std;

// substitutes a byte
unsigned char substitute(unsigned char byte) {

	static unsigned char sbox[256] = {
	  0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
	  0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
	  0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
	  0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
	  0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
	  0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
	  0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
	  0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
	  0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
	  0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
	  0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
	  0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
	  0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
	  0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
	  0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
	  0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16

	};

	return sbox[byte];
}

unsigned char reverse_substitute(unsigned char byte) {

		static unsigned char rsbox[256] = {
		0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb
		, 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb
		, 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e
		, 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25
		, 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92
		, 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84
		, 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06
		, 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b
		, 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73
		, 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e
		, 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b
		, 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4
		, 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f
		, 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef
		, 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61
		, 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d };

	return rsbox[byte];
}
unsigned char rconForADDROUNDKEY(unsigned char byte) { 
	
	static unsigned char rcon[256] = {
	0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a,
	0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39,
	0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a,
	0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8,
	0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef,
	0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc,
	0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b,
	0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3,
	0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94,
	0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20,
	0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35,
	0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f,
	0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04,
	0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63,
	0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd,
	0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d
	};

	return rcon[byte];
}


void rotate_left(unsigned char* byte_array) {
	unsigned char temp = byte_array[0];	//index 12 stored
	byte_array[0] = byte_array[1];	// 13 in 12
	byte_array[1] = byte_array[2];	// 14 in 13
	byte_array[2] = byte_array[3];	// 15 in 14
	byte_array[3] = temp;		// 12 in 15
}


void SubBytes(unsigned char* state) {

	for (int i = 0; i < 16; i++) {	//takes whole array of 16 bytes
		state[i] = substitute(state[i]);	//substitute each byte with coressponding element in sbox[256]
	}
}

void InvSubBytes(unsigned char* state) {

	for (int i = 0; i < 16; i++) {	//takes whole array of 16 bytes
		state[i] = reverse_substitute(state[i]);	//substitute each byte with coressponding element in sbox[256]
	}
}

void InvShiftRows(unsigned char* state) {
	unsigned char temp[16];

	//fisrt row
	for (int i = 0; i < 4; i++) {
		temp[i] = state[i];		//same
	}

	//second row
	for (int i = 4; i < 7; i++) {
		temp[i+1] = state[i];		//3 byte shift to right
	}
	temp[4] = state[7];	//1 byte shift to leftmost side

	//third row
	for (int i = 8; i < 10; i++) {
		temp[i] = state[i + 2];		//2 byte shift to right
	}
	temp[10] = state[8];	//1 byte shift to leftmost side-1
	temp[11] = state[9];	//1 byte shift to leftmost side

	//fourth row
	for (int i = 12; i < 15; i++) {
		temp[i] = state[i + 1];		//3 byte shift to left
	}
	temp[15] = state[12];	//1 byte shift to rightmost side

	for (int i = 0; i < 16; i++) {
		state[i] = temp[i];	//copying temp array back to state
	}

}

void ShiftRows(unsigned char* state) {

	unsigned char temp[16];

	//fisrt row
	for (int i = 0; i < 4; i++) {
		temp[i] = state[i];		//same
	}

	//second row
	for (int i = 4; i < 7; i++) {
		temp[i] = state[i+1];		//3 byte shift to left
	}
	temp[7] = state[4];	//1 byte shift to rightmost side

	//third row
	for (int i = 8; i < 10; i++) {
		temp[i] = state[i+2];		//2 byte shift to left
	}
	temp[10] = state[8];	//1 byte shift to rightmost side-1
	temp[11] = state[9];	//1 byte shift to rightmost side

	//fourth row
	for (int i = 13; i < 16; i++) {
		temp[i] = state[i -1];		//3 byte shift to right
	}
	temp[12] = state[15];	//1 byte shift to leftmost side

	for (int i = 0; i < 16; i++) {
		state[i] = temp[i];	//copying temp array back to state
	}
}

void addRoundKey(unsigned char* state, unsigned char* roundKey) {
	
	for (int i = 0; i < 16; i++) {
		state[i] = (state[i] ^ roundKey[i]); //xor of state with round key
	}
}


//////////KEY EXPANSION FUNCTIONS/////////////
//---------byteshift for key expansion
void byteShiftLeft(unsigned char* bytes) {
	unsigned char temp = bytes[0];	//index 12 stored
	bytes[0] = bytes[1];	// 13 in 12
	bytes[1] = bytes[2];	// 14 in 13
	bytes[2] = bytes[3];	// 15 in 14
	bytes[3] = temp;		// 12 in 15
}
//---------s-box substitution for key expansion
void sBoxSubstitutionLast4(unsigned char* bytes4) {
	bytes4[0] = substitute(bytes4[0]);	
	bytes4[1] = substitute(bytes4[1]);
	bytes4[2] = substitute(bytes4[2]);
	bytes4[3] = substitute(bytes4[3]);
}
//---------adding rcon for key expansion
void addRoundKeyLast1(unsigned char* bytes1, int index) {
	bytes1[0] ^= rconForADDROUNDKEY(index); //substituting from rcon
}
//---------xoring all rows and storing
void XORingStep(unsigned char* w1, unsigned char* w2, unsigned char* w3, unsigned char* w4, unsigned char* temp) {

	int counter = 0;	// for temp array
	for (int i = 0; i < 4; i++) {
		temp[counter] = w1[i] ^ w4[i]; // last part xor with first
		counter++;
	}
	
	int a = 0;
	for (int i = 0; i < 4; i++) {
		temp[counter] = temp[a+i] ^ w2[i];	//result of 1st xor with second
		counter++;
	}

	a = 4;
	for (int i = 0; i < 4; i++) {
		temp[counter] = temp[a+i] ^ w3[i];	//result of 2nd xor with third
		counter++;
	}

	a = 8;
	unsigned char temp2[4];
	for (int i = 0; i < 4; i++) {
		temp2[i] = temp[a+i] ^ temp[a+i+4];	//result of 3rd xor with last 4 elements of array/state
		counter++;
	}

	temp[12] = temp2[0]; //putting back result in last 4 index after xor
	temp[13] = temp2[1];
	temp[14] = temp2[2];
	temp[15] = temp2[3];

	w4[0] = temp[12]; //for next keys
	w4[1] = temp[13];
	w4[2] = temp[14];
	w4[3] = temp[15];
}

void KeyExpansion(unsigned char* cipherkey, unsigned char* expandedkey) {

	unsigned char temp[16];	//temporary for each key
	for (int i = 0; i < 16; i++) {
		expandedkey[i] = cipherkey[i];	//copying first 16 index
		temp[i] = cipherkey[i];	//copying key for next round key
	}
	

	unsigned char w1[4];	//for values from previous key
	unsigned char w2[4];
	unsigned char w3[4];
	unsigned char w4[4];
	int counter = 0; // for taking values from expanded key
	int totalElements = 16;	//for storing in expanded key
	int index = 1;	// for add round key function

	for (int i = 0; i < 10; i++) {

		counter = i * 16; // 0->16->32->...
		for (int j = 0; j < 4; j++) {
			w1[j] = expandedkey[counter];	//copying previous key
			w2[j] = expandedkey[counter + 4];
			w3[j] = expandedkey[counter + 8];
			w4[j] = expandedkey[counter + 12];
			counter++;
		}
		byteShiftLeft(w4);	//byte shift on last row
		sBoxSubstitutionLast4(w4);	//sbox substitution on last row
		addRoundKeyLast1(w4, index);	//adding round key on last row
		index++;	//for next iteration

		XORingStep(w1, w2, w3, w4, temp);	//xoring values and storing in temp
		
		for (int k = 0; k < 16; k++) {
			expandedkey[totalElements] = temp[k]; //copying new key to expandedkey array
			totalElements++;
		}
	}
}

void MixColumn(unsigned char* state) {

	unsigned char temp[4][4] = { 0x02, 0x03, 0x01, 0x01,	//given
								 0x01, 0x02, 0x03, 0x01,
								 0x01, 0x01, 0x02, 0x03,
								 0x03, 0x01, 0x01, 0x02 };
	unsigned temp1[4][4];	//for result

	int counter = 0;
	for (int i = 0 ; i<4 ; i++) {
		for (int j=0 ; j<4 ; j++) {
			temp1[i][j] = state[counter];	//converting 1D array in 2D
			counter++;
		}
	}

	unsigned char result[16]; //for answer

	counter = 0;	
	unsigned char arr[4];	//for temporary result
	unsigned char check = 128;	//for checking values in array
	int carr = 0;	//index for temporary result

	for (int i=0 ; i<4 ; ++i) {
		for (int j=0 ; j<4 ; ++j) {
			for (int k=0 ; k<4 ; ++k) {

				if (temp[i][k] == 0x01) {
					arr[carr] = temp1[k][j];	//storing as it is
					carr++;
				}
				else if (temp[i][k] == 0x02) {
					arr[carr] = 0x02 * temp1[k][j];	//multiply with 0x02
					if (temp1[k][j] > check) {
						arr[carr] ^= 0x1b;	//if it is greater then 128 means greater then 8 bits
					}
					carr++;
				}
				else if (temp[i][k] == 0x03) {
					arr[carr] = 0x02 * temp1[k][j]; 	//multiply with 0x02
					if (temp1[k][j] > check) {
						arr[carr] ^= 0x1b; //if it is greater then 128 means greater then 8 bits
					}
					arr[carr] ^= temp1[k][j];	//given in running example
					carr++;
				}

				if (carr == 4) {
					result[counter] = arr[0] ^ arr[1] ^ arr[2] ^ arr[3];	//storing values after xor in result
					counter++;
					carr = 0;
				}
			}
		}
	}

	for (int i = 0; i < 16; i++) {
		state[i] = result[i];		//moving back to state
	}
}


//////////////////FOR DECRYPTION///////////

// Tables taken from internet

unsigned char substituteMULL9(unsigned char byte) {
	static unsigned char mul_9[256] =
	{
		0x00,0x09,0x12,0x1b,0x24,0x2d,0x36,0x3f,0x48,0x41,0x5a,0x53,0x6c,0x65,0x7e,0x77,
		0x90,0x99,0x82,0x8b,0xb4,0xbd,0xa6,0xaf,0xd8,0xd1,0xca,0xc3,0xfc,0xf5,0xee,0xe7,
		0x3b,0x32,0x29,0x20,0x1f,0x16,0x0d,0x04,0x73,0x7a,0x61,0x68,0x57,0x5e,0x45,0x4c,
		0xab,0xa2,0xb9,0xb0,0x8f,0x86,0x9d,0x94,0xe3,0xea,0xf1,0xf8,0xc7,0xce,0xd5,0xdc,
		0x76,0x7f,0x64,0x6d,0x52,0x5b,0x40,0x49,0x3e,0x37,0x2c,0x25,0x1a,0x13,0x08,0x01,
		0xe6,0xef,0xf4,0xfd,0xc2,0xcb,0xd0,0xd9,0xae,0xa7,0xbc,0xb5,0x8a,0x83,0x98,0x91,
		0x4d,0x44,0x5f,0x56,0x69,0x60,0x7b,0x72,0x05,0x0c,0x17,0x1e,0x21,0x28,0x33,0x3a,
		0xdd,0xd4,0xcf,0xc6,0xf9,0xf0,0xeb,0xe2,0x95,0x9c,0x87,0x8e,0xb1,0xb8,0xa3,0xaa,
		0xec,0xe5,0xfe,0xf7,0xc8,0xc1,0xda,0xd3,0xa4,0xad,0xb6,0xbf,0x80,0x89,0x92,0x9b,
		0x7c,0x75,0x6e,0x67,0x58,0x51,0x4a,0x43,0x34,0x3d,0x26,0x2f,0x10,0x19,0x02,0x0b,
		0xd7,0xde,0xc5,0xcc,0xf3,0xfa,0xe1,0xe8,0x9f,0x96,0x8d,0x84,0xbb,0xb2,0xa9,0xa0,
		0x47,0x4e,0x55,0x5c,0x63,0x6a,0x71,0x78,0x0f,0x06,0x1d,0x14,0x2b,0x22,0x39,0x30,
		0x9a,0x93,0x88,0x81,0xbe,0xb7,0xac,0xa5,0xd2,0xdb,0xc0,0xc9,0xf6,0xff,0xe4,0xed,
		0x0a,0x03,0x18,0x11,0x2e,0x27,0x3c,0x35,0x42,0x4b,0x50,0x59,0x66,0x6f,0x74,0x7d,
		0xa1,0xa8,0xb3,0xba,0x85,0x8c,0x97,0x9e,0xe9,0xe0,0xfb,0xf2,0xcd,0xc4,0xdf,0xd6,
		0x31,0x38,0x23,0x2a,0x15,0x1c,0x07,0x0e,0x79,0x70,0x6b,0x62,0x5d,0x54,0x4f,0x46
	};


	return  mul_9[byte];
}

unsigned char substituteMULL11(unsigned char byte) {

	static unsigned char mul_11[256] =
	{
		0x00,0x0b,0x16,0x1d,0x2c,0x27,0x3a,0x31,0x58,0x53,0x4e,0x45,0x74,0x7f,0x62,0x69,
		0xb0,0xbb,0xa6,0xad,0x9c,0x97,0x8a,0x81,0xe8,0xe3,0xfe,0xf5,0xc4,0xcf,0xd2,0xd9,
		0x7b,0x70,0x6d,0x66,0x57,0x5c,0x41,0x4a,0x23,0x28,0x35,0x3e,0x0f,0x04,0x19,0x12,
		0xcb,0xc0,0xdd,0xd6,0xe7,0xec,0xf1,0xfa,0x93,0x98,0x85,0x8e,0xbf,0xb4,0xa9,0xa2,
		0xf6,0xfd,0xe0,0xeb,0xda,0xd1,0xcc,0xc7,0xae,0xa5,0xb8,0xb3,0x82,0x89,0x94,0x9f,
		0x46,0x4d,0x50,0x5b,0x6a,0x61,0x7c,0x77,0x1e,0x15,0x08,0x03,0x32,0x39,0x24,0x2f,
		0x8d,0x86,0x9b,0x90,0xa1,0xaa,0xb7,0xbc,0xd5,0xde,0xc3,0xc8,0xf9,0xf2,0xef,0xe4,
		0x3d,0x36,0x2b,0x20,0x11,0x1a,0x07,0x0c,0x65,0x6e,0x73,0x78,0x49,0x42,0x5f,0x54,
		0xf7,0xfc,0xe1,0xea,0xdb,0xd0,0xcd,0xc6,0xaf,0xa4,0xb9,0xb2,0x83,0x88,0x95,0x9e,
		0x47,0x4c,0x51,0x5a,0x6b,0x60,0x7d,0x76,0x1f,0x14,0x09,0x02,0x33,0x38,0x25,0x2e,
		0x8c,0x87,0x9a,0x91,0xa0,0xab,0xb6,0xbd,0xd4,0xdf,0xc2,0xc9,0xf8,0xf3,0xee,0xe5,
		0x3c,0x37,0x2a,0x21,0x10,0x1b,0x06,0x0d,0x64,0x6f,0x72,0x79,0x48,0x43,0x5e,0x55,
		0x01,0x0a,0x17,0x1c,0x2d,0x26,0x3b,0x30,0x59,0x52,0x4f,0x44,0x75,0x7e,0x63,0x68,
		0xb1,0xba,0xa7,0xac,0x9d,0x96,0x8b,0x80,0xe9,0xe2,0xff,0xf4,0xc5,0xce,0xd3,0xd8,
		0x7a,0x71,0x6c,0x67,0x56,0x5d,0x40,0x4b,0x22,0x29,0x34,0x3f,0x0e,0x05,0x18,0x13,
		0xca,0xc1,0xdc,0xd7,0xe6,0xed,0xf0,0xfb,0x92,0x99,0x84,0x8f,0xbe,0xb5,0xa8,0xa3
	};

	return  mul_11[byte];
}

unsigned char substituteMULL13(unsigned char byte) {

	static unsigned char mul_13[256] =
	{
		0x00,0x0d,0x1a,0x17,0x34,0x39,0x2e,0x23,0x68,0x65,0x72,0x7f,0x5c,0x51,0x46,0x4b,
		0xd0,0xdd,0xca,0xc7,0xe4,0xe9,0xfe,0xf3,0xb8,0xb5,0xa2,0xaf,0x8c,0x81,0x96,0x9b,
		0xbb,0xb6,0xa1,0xac,0x8f,0x82,0x95,0x98,0xd3,0xde,0xc9,0xc4,0xe7,0xea,0xfd,0xf0,
		0x6b,0x66,0x71,0x7c,0x5f,0x52,0x45,0x48,0x03,0x0e,0x19,0x14,0x37,0x3a,0x2d,0x20,
		0x6d,0x60,0x77,0x7a,0x59,0x54,0x43,0x4e,0x05,0x08,0x1f,0x12,0x31,0x3c,0x2b,0x26,
		0xbd,0xb0,0xa7,0xaa,0x89,0x84,0x93,0x9e,0xd5,0xd8,0xcf,0xc2,0xe1,0xec,0xfb,0xf6,
		0xd6,0xdb,0xcc,0xc1,0xe2,0xef,0xf8,0xf5,0xbe,0xb3,0xa4,0xa9,0x8a,0x87,0x90,0x9d,
		0x06,0x0b,0x1c,0x11,0x32,0x3f,0x28,0x25,0x6e,0x63,0x74,0x79,0x5a,0x57,0x40,0x4d,
		0xda,0xd7,0xc0,0xcd,0xee,0xe3,0xf4,0xf9,0xb2,0xbf,0xa8,0xa5,0x86,0x8b,0x9c,0x91,
		0x0a,0x07,0x10,0x1d,0x3e,0x33,0x24,0x29,0x62,0x6f,0x78,0x75,0x56,0x5b,0x4c,0x41,
		0x61,0x6c,0x7b,0x76,0x55,0x58,0x4f,0x42,0x09,0x04,0x13,0x1e,0x3d,0x30,0x27,0x2a,
		0xb1,0xbc,0xab,0xa6,0x85,0x88,0x9f,0x92,0xd9,0xd4,0xc3,0xce,0xed,0xe0,0xf7,0xfa,
		0xb7,0xba,0xad,0xa0,0x83,0x8e,0x99,0x94,0xdf,0xd2,0xc5,0xc8,0xeb,0xe6,0xf1,0xfc,
		0x67,0x6a,0x7d,0x70,0x53,0x5e,0x49,0x44,0x0f,0x02,0x15,0x18,0x3b,0x36,0x21,0x2c,
		0x0c,0x01,0x16,0x1b,0x38,0x35,0x22,0x2f,0x64,0x69,0x7e,0x73,0x50,0x5d,0x4a,0x47,
		0xdc,0xd1,0xc6,0xcb,0xe8,0xe5,0xf2,0xff,0xb4,0xb9,0xae,0xa3,0x80,0x8d,0x9a,0x97
	};
	return  mul_13[byte];
}

unsigned char substituteMULL14(unsigned char byte) {

	static unsigned char mul_14[256] =
	{
		0x00,0x0e,0x1c,0x12,0x38,0x36,0x24,0x2a,0x70,0x7e,0x6c,0x62,0x48,0x46,0x54,0x5a,
		0xe0,0xee,0xfc,0xf2,0xd8,0xd6,0xc4,0xca,0x90,0x9e,0x8c,0x82,0xa8,0xa6,0xb4,0xba,
		0xdb,0xd5,0xc7,0xc9,0xe3,0xed,0xff,0xf1,0xab,0xa5,0xb7,0xb9,0x93,0x9d,0x8f,0x81,
		0x3b,0x35,0x27,0x29,0x03,0x0d,0x1f,0x11,0x4b,0x45,0x57,0x59,0x73,0x7d,0x6f,0x61,
		0xad,0xa3,0xb1,0xbf,0x95,0x9b,0x89,0x87,0xdd,0xd3,0xc1,0xcf,0xe5,0xeb,0xf9,0xf7,
		0x4d,0x43,0x51,0x5f,0x75,0x7b,0x69,0x67,0x3d,0x33,0x21,0x2f,0x05,0x0b,0x19,0x17,
		0x76,0x78,0x6a,0x64,0x4e,0x40,0x52,0x5c,0x06,0x08,0x1a,0x14,0x3e,0x30,0x22,0x2c,
		0x96,0x98,0x8a,0x84,0xae,0xa0,0xb2,0xbc,0xe6,0xe8,0xfa,0xf4,0xde,0xd0,0xc2,0xcc,
		0x41,0x4f,0x5d,0x53,0x79,0x77,0x65,0x6b,0x31,0x3f,0x2d,0x23,0x09,0x07,0x15,0x1b,
		0xa1,0xaf,0xbd,0xb3,0x99,0x97,0x85,0x8b,0xd1,0xdf,0xcd,0xc3,0xe9,0xe7,0xf5,0xfb,
		0x9a,0x94,0x86,0x88,0xa2,0xac,0xbe,0xb0,0xea,0xe4,0xf6,0xf8,0xd2,0xdc,0xce,0xc0,
		0x7a,0x74,0x66,0x68,0x42,0x4c,0x5e,0x50,0x0a,0x04,0x16,0x18,0x32,0x3c,0x2e,0x20,
		0xec,0xe2,0xf0,0xfe,0xd4,0xda,0xc8,0xc6,0x9c,0x92,0x80,0x8e,0xa4,0xaa,0xb8,0xb6,
		0x0c,0x02,0x10,0x1e,0x34,0x3a,0x28,0x26,0x7c,0x72,0x60,0x6e,0x44,0x4a,0x58,0x56,
		0x37,0x39,0x2b,0x25,0x0f,0x01,0x13,0x1d,0x47,0x49,0x5b,0x55,0x7f,0x71,0x63,0x6d,
		0xd7,0xd9,0xcb,0xc5,0xef,0xe1,0xf3,0xfd,0xa7,0xa9,0xbb,0xb5,0x9f,0x91,0x83,0x8d
	};

	return  mul_14[byte];
}

//////////////////////////////////////////

void InvMixColumn(unsigned char* state) {

	unsigned char temp[4][4] = { 0x0E, 0x0B, 0x0D, 0x09, //given
								 0x09, 0x0E, 0x0B, 0x0D, 
								 0x0D, 0x09, 0x0E, 0x0B,
								 0x0B, 0x0D, 0x09, 0x0E };
	unsigned temp1[4][4];	//for state array

	int counter = 0;
	for (int i = 0; i < 4; i++) {
		for (int j = 0; j < 4; j++) {
			temp1[i][j] = state[counter];	//converting 1D array to 2D
			counter++;
		}
	}

	unsigned char result[16];	//for storing result

	counter = 0;
	unsigned char arr[4];	//for temporary result of multiplication
	int carr = 0;

	for (int i = 0; i < 4; ++i) {
		for (int j = 0; j < 4; ++j) {
			for (int k = 0; k < 4; ++k) {

				if (temp[i][k] == 0x09) {
					arr[carr] = substituteMULL9(temp1[k][j]);	//from given box
					arr[carr] ^= 0x1b; //if it is greater then 128 means greater then 8 bits
					carr++;
				}
				else if (temp[i][k] == 0x0B) {
					arr[carr] = substituteMULL11(temp1[k][j]);//from given box
					arr[carr] ^= 0x1b; //if it is greater then 128 means greater then 8 bits
					carr++;
				}
				else if (temp[i][k] == 0x0D) {
					arr[carr] = substituteMULL13(temp1[k][j]);//from given box
					arr[carr] ^= 0x1b; //if it is greater then 128 means greater then 8 bits
					carr++;
				}
				else if (temp[i][k] == 0x0E) {
					arr[carr] = substituteMULL14(temp1[k][j]);//from given box
					arr[carr] ^= 0x1b; //if it is greater then 128 means greater then 8 bits
					carr++;
				}

				if (carr == 4) {
					result[counter] = arr[0] ^ arr[1] ^ arr[2] ^ arr[3];	//storing result after xor
					counter++;
					carr = 0;
				}
			}
		}
	}

	for (int i = 0; i < 16; i++) {
		state[i] = result[i]; //back to state
	}
}

void transpose(unsigned char* temp) {	//for implementation given in running example

	int counter = 0; 
	unsigned char temp1[4][4];
	for (int i = 0; i < 4; i++) {
		for (int j = 0; j < 4; j++) {
			temp1[j][i] = temp[counter];
			counter++;
		}
	}

	counter = 0;
	for (int i = 0; i < 4; i++) {
		for (int j = 0; j < 4; j++) {
			temp[counter] = temp1[i][j];
			counter++;
		}
	}
}



void Encrypt(unsigned char* plaintext, unsigned char* cipherkey, unsigned char* ciphertext) {
	
	unsigned char expandedKeysArray[176];
	KeyExpansion(cipherkey, expandedKeysArray);	//expanded keys 11
	int counter = 0;

	unsigned char newKey[16];	//for taking chunks of key
	for (int i = 0; i < 16; i++) {
		newKey[i] = expandedKeysArray[counter];
		counter++;
	}
	transpose(newKey);	//for running example
	transpose(plaintext);//for running example
	addRoundKey(plaintext, newKey); //round 0

	for (int i = 1; i <= 10; i++) {	//round 1-10

		SubBytes(plaintext);
		ShiftRows(plaintext);
		if (i < 10) {	//for last round
			MixColumn(plaintext);
		}
		for (int i = 0 ; i < 16 ; i++) {
			newKey[i] = expandedKeysArray[counter];
			counter++;
		}
		transpose(newKey);//for running example
		addRoundKey(plaintext, newKey);
	}

	transpose(plaintext);//for running example
	for (int i = 0; i < 16; i++) {
		ciphertext[i] = plaintext[i]; //copying result
	}
}

void Decrypt(unsigned char* ciphertext, unsigned char* cipherkey, unsigned char* plaintext) {

	unsigned char expandedKeysArray[176];
	KeyExpansion(cipherkey, expandedKeysArray); //expanded keys 11
	int counter = 160;

	unsigned char newKey[16];	//for storing chunks of key
	for (int i = 0; i < 16; i++) {
		newKey[i] = expandedKeysArray[counter];
		counter++;
	}
	counter -= 32;	//because storing backward

	addRoundKey(ciphertext, newKey);	//round 0
	transpose(ciphertext);//for running example
	InvShiftRows(ciphertext);
	transpose(ciphertext);//for running example
	InvSubBytes(ciphertext);

	for (int i = 1; i < 10; i++) {	//round 1-9

		for (int i = 0; i < 16; i++) {
			newKey[i] = expandedKeysArray[counter]; //for storing chunks of key
			counter++;
		}
		counter -= 32;//because storing backward

		addRoundKey(ciphertext, newKey);
		transpose(ciphertext);//for running example
		InvMixColumn(ciphertext);
		InvShiftRows(ciphertext);
		transpose(ciphertext);//for running example
		InvSubBytes(ciphertext);

	}

	counter = 0;	
	for (int i = 0; i < 16; i++) {
		newKey[i] = expandedKeysArray[counter];
		counter++;
	}
	addRoundKey(ciphertext, newKey);	//last round

	for (int i = 0; i < 16; i++) {
		plaintext[i] = ciphertext[i];	//copying result
	}
}
